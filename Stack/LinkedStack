/* LinkedStack.java */
import java.lang.Iterable;
import java.util.*;
 
public class LinkedStack <E> implements Stack <E>{
  public class Node{
    E item;
    Node next;
  
    Node(E item, Node next){
      this.item = item;
      this.next = next;
    }
  }
  Node head = null;
  int size = 0; 
  
  public void push(E item){ //Add item to the beginning of the list.
    Node prevHead = head;
    head = new Node(item,head);
    head.item = item;
    head.next = prevHead;
    size++;
  }
 
  public E pop(){   //Remove item from the beginning of the list.
    E item = head.item;
    head = head.next;
    size--;
    return item;
  }
  
  public E peek(){ //Show the first item in the list/the item in the front
    E item = head.item;
    return item;
  }
  
  public boolean isEmpty(){
    if(size == 0){
      return true;
    }
    else
      return false;
  }
 
  public int size(){ //Return number of items
    return size;
  }
 
  public Iterator<E> iterator(){   //Iterator for traversing stack items
    return new LinkedStackIterator();
  }
 
  public class LinkedStackIterator implements IteratorStackInterface <E>{ //inner class to implement iterator interface
    public int i = size;
    public Node current = head; //the first node
 
    public boolean hasNext(){
      if(current != null){
        return true;
      }
      return false;
    }
 
    public E next(){
      E item = current.item;
      current = current.next;
      i--;
      return item;
    }
  }
}
