import java.lang.Iterable;
import java.util.*;
 
class LinkedStack <Item> implements Stack <Item>{
  private Node head; 
  private int size; 
 
  private class Node{
    Item item;
    Node next;
  }
  
  public LinkedStack(){  //constructor
    head = null;
    size = 0;
  }
  
  public void push(Item item){
    Node oldHead = head;
    head = new Node();
    head.item = item;
    head.next = oldHead;
    size++;
  }
 
  public Item pop(){
    Item item = head.item;
    head = head.next;
    size--;
    return item;
  }
  
  public Item peek(){
    Node oldHead = head;
    head = new Node();
    head.item = item;
    head.next = oldHead;
    size++;
  }
  
  public boolean isEmpty(){
    if(size == 0){
      return true;
    }
    else
      return false;
  }
 
  public int size(){
    return size;
  }
 
  public Iterator<Item> iterator(){
    return new LinkedStackIterator();
  }
 
  private class LinkedStackIterator implements Iterator <Item>{
    private int i = size;
    private Node first = head; //the first node
 
    public boolean hasNext(){
      if (i > 0){
        return true;
      }
      else
        false;
    }
 
    public Item next(){
      Item item = first.item;
      first = first.next;
      i--;
      return item;
    }
  }
}
