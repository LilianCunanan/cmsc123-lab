import java.lang.Iterable;
import java.util.*;
 
class LinkedQueue <Item> implements Queue <Item>{
  private Node front;
  private Node rear;
  private int size;
  
  public LinkedQueue(){ //constructor
    front = null;
    rear = null;
    size = 0;
  }
  
  private class Node{ //define node
    Item item;
    Node next;
  }
  
  public boolean isEmpty(){ //check number of items
    if(size == 0){
      return true;
    }
    else
      return false;
  }
 
  public Item delete(){
    Item item = front.item;
    front = front.next;
    if (isEmpty()){
      rear = null;
    }
    size--;
    return item;
  }
 
  public void insert(Item item){
    Node oldRear = rear;
    rear = new Node();
    rear.item = item;
    rear.next = null;
    if (isEmpty()){
      front = rear;
    }
    else{
      oldRear.next = rear;
    }
    size++;
  }
 
  public int size(){
    return size;
  }
 
  public Iterator<Item> iterator(){
    return new LinkedQueueIterator();
  }
 
  private class LinkedQueueIterator implements Iterator <Item>{
    private int i = size;
    private Node first = front; //the first node
 
    public boolean hasNext(){
      return (i > 0);
    }
 
    public Item next(){
      Item item = first.item;
      first = first.next;
      i--;
      return item;
    }
  }
}
